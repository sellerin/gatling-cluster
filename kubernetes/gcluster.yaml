kind: Namespace
apiVersion: v1
metadata:
  name: dev
  labels:
    name: dev
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nfs-pv-provisioning-demo
  namespace: dev
  labels:
    demo: nfs-pv-provisioning
spec:
  accessModes: [ "ReadWriteOnce" ]
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: nfs-server
  namespace: dev
spec:
  replicas: 1
  selector:
    role: nfs-server
  template:
    metadata:
      labels:
        role: nfs-server
    spec:
      containers:
      - name: nfs-server
        image: k8s.gcr.io/volume-nfs:0.8
        ports:
          - name: nfs
            containerPort: 2049
          - name: mountd
            containerPort: 20048
          - name: rpcbind
            containerPort: 111
        securityContext:
          privileged: true
        volumeMounts:
          - mountPath: /exports
            name: mypvc
      volumes:
        - name: mypvc
          persistentVolumeClaim:
            claimName: nfs-pv-provisioning-demo
---
kind: Service
apiVersion: v1
metadata:
  name: nfs-server
  namespace: dev
spec:
  ports:
    - name: nfs
      port: 2049
    - name: mountd
      port: 20048
    - name: rpcbind
      port: 111
  selector:
    role: nfs-server
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs
  namespace: dev
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain    
  nfs:
    server: nfs-server.dev.svc.cluster.local
    path: "/"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nfs
  namespace: dev
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: ""
  resources:
    requests:
      storage: 1Gi
---
kind: Service
apiVersion: v1
metadata:
  name: static-web
  namespace: dev
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
  selector:
    role: static-web
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: static-web
  namespace: dev
spec:
  replicas: 1
  selector:
    role: static-web
  template:
    metadata:
      labels:
        role: static-web
    spec:
      containers:
      - name: static-web
        image: nginx
        ports:
          - name: http
            containerPort: 80
        securityContext:
          privileged: true
        volumeMounts:
          - mountPath: /usr/share/nginx/html
            name: nfs
      volumes:
        - name: nfs
          persistentVolumeClaim:
            claimName: nfs
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: batch-watcher-role
  namespace: dev
rules:
- apiGroups: [""]
  verbs: ["get", "list"]
  resources: ["services"]
- apiGroups: ["batch", "extensions","apps" ]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: batch-watcher-rb
  namespace: dev
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: batch-watcher-role
subjects:
- kind: ServiceAccount
  name: default
  namespace: dev
---
apiVersion: v1
kind: Secret
metadata:
  name: git-secret
  namespace: dev
type: Opaque
data:
  username: {{username}}
  password: {{password}}
