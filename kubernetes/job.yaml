apiVersion: batch/v1
kind: Job
metadata:
  name: batch-job
spec:
  completions: 2
  parallelism: 2
  activeDeadlineSeconds: 400
  template:
    spec:
      volumes:
      - name: nfs
        persistentVolumeClaim:
          claimName: nfs
      containers:
      - name: main
        image: eu.gcr.io/iron-inkwell-205415/perf:latest
        volumeMounts:
            - name: nfs
              mountPath: /gatling-charts-highcharts-bundle-3.0.2/results
      restartPolicy: Never
  backoffLimit: 1
---  
apiVersion: batch/v1
kind: Job
metadata:
  name: batch-watcher
spec:
  completions: 1
  parallelism: 1
  activeDeadlineSeconds: 40000
  template:
    spec:
      volumes:
      - name: nfs
        persistentVolumeClaim:
          claimName: nfs
      containers:
      - name: watcher
        image: eu.gcr.io/iron-inkwell-205415/watcher:latest
#        command: ["sleep"]
#        args: ["9999999999"]
        volumeMounts:
            - name: nfs
              mountPath: /results
      restartPolicy: Never
  backoffLimit: 0
---
kind: Service
apiVersion: v1
metadata:
  name: static-web
spec:
  type: LoadBalancer
  ports:
    - name: http
      port: 80
  selector:
    role: static-web
---
apiVersion: v1
kind: ReplicationController
metadata:
  name: static-web
spec:
  replicas: 1
  selector:
    role: static-web
  template:
    metadata:
      labels:
        role: static-web
    spec:
      containers:
      - name: static-web
        image: nginx
        ports:
          - name: http
            containerPort: 80
        securityContext:
          privileged: true
        volumeMounts:
          - mountPath: /usr/share/nginx/html
            name: nfs
      volumes:
        - name: nfs
          persistentVolumeClaim:
            claimName: nfs

#init container
#rm -rf gatling/results/*


#desactiver rbac et donner tous les droits a tous les services
#kubectl create clusterrolebinding permissive-binding --clusterrole=cluster-admin --group=system:serviceaccounts
#export CURL_CA_BUNDLE=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
#TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)

#retourne le nombre de job a attendre
#curl -H "Authorization: Bearer $TOKEN"  -s https://kubernetes/apis/batch/v1/namespaces/default/jobs/batch-job/status | jq '.spec.completions'
#retourne 2 ou null
#curl -H "Authorization: Bearer $TOKEN" -s https://kubernetes/apis/batch/v1/namespaces/default/jobs/batch-job/status | jq '.status.failed'
#retourne 2 ou null
#curl -H "Authorization: Bearer $TOKEN" -s https://kubernetes/apis/batch/v1/namespaces/default/jobs/batch-job/status | jq '.status.active'
#retourne 2 ou null
#curl -H "Authorization: Bearer $TOKEN" -s https://kubernetes/apis/batch/v1/namespaces/default/jobs/batch-job/status | jq '.status.succeeded'

#pour avoir l'adresse ip du serveur web
#kubectl get svc